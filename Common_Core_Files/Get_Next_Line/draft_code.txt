// char	*find_new_line(const char *s)
// {
// 	while (*s)
// 	{
// 		if (*s != '\n')
// 			s++;
// 		else
// 			return ((char *)s);
// 	}
// 	return (NULL);
// }
//
// char	*substr(char const *s, unsigned int start, size_t len)
// {
// 	size_t	slen;
// 	size_t	sub_len;
// 	char	*sub_s;
//
// 	sub_len = 0;
// 	if (!s)
// 		return (NULL);
// 	slen = get_len(s);
// 	if (slen - start < len)
// 		sub_len = get_len(s) - start;
// 	else
// 		sub_len = len;
// 	if (slen < start)
// 		return (NULL);
// 	sub_s = malloc((sub_len + 1) * sizeof(char));
// 	if (!sub_s)
// 		return (NULL);
// 	cpy(sub_s, s + start, sub_len);
// 	sub_s[sub_len] = '\0';
// 	return (sub_s);
// }
//
// void	*cpy(void *dest, const void *src, size_t cpysize)
// {
// 	size_t		i;
// 	char		*cdest;
// 	const char	*csrc;
//
// 	if (cpysize == 0)
// 		return (dest);
// 	i = 0;
// 	csrc = (const char *)src;
// 	cdest = (char *)dest;
// 	while (i < cpysize)
// 	{
// 		cdest[i] = csrc[i];
// 		i++;
// 	}
// 	return (dest);
// }
static char	*extract_line(char **stash)
{
	char	*line;
	char	*leftovers;
	int		i;
	int		j;

	i = 0;
	while ((*stash)[i] && (*stash)[i] != '\n')
		i++;
	if ((*stash)[i] == '\n')
		line = malloc(i + 2);
	else
		line = malloc(i + 1);
	if (!line)
		return (NULL);
	j = 0;
	while (j <= i)
	{
		line[j] = (*stash)[j];
		j++;
	}
	line[j] = '\0';
	leftovers = NULL;
	if ((*stash)[i] == '\n' && (*stash)[i + 1])
		leftovers = str_duplicate(&(*stash)[i + 1],
									get_len((*stash)) - (j + 1));
	free((*stash));
	(*stash) = leftovers;
	return (line);
}
########################################################################################################
########################################################################################################

//extract_line(&stash)

// static char	*extract_line(char **stash)
// {
// 	char	*line;
// 	char	*leftovers;
// 	line = ft_substr((*stash), 0, (find_new_line((*stash)) - (*stash) + 1));
// 	leftovers = find_new_line((*stash)) + 1;
// 	free((*stash));
// 	(*stash) = malloc(get_len(leftovers) + 1);
// 	(*stash) = leftovers;
// 	(*stash)[get_len(leftovers)] = '\0';
// 	return (line);
// }

// static char	*stash_data(int fd, int nbytes, char *buff, char **stash)
// {
// 	while (buff && !find_new_line(buff))
// 	{
// 		buff[nbytes] = '\0';
// 		(*stash) = join((*stash), buff);
// 		if (!(*stash))
// 		{
// 			free(buff);
// 			return (NULL);
// 		}
// 		nbytes = read(fd, buff, BUFFER_SIZE);
// 	}
// 	(*stash) = join((*stash), buff);
// 	free(buff);
// 	return (extract_line(&(*stash)));
// }

// static char	*read_to_buff(int fd, int nbytes, char *buff, char **stash)
// {
// 	if (nbytes <= 0)
// 	{
// 		free(buff);
// 		if (nbytes == 0)
// 			return ((*stash));
// 		else
// 			return (NULL);
// 	}
// 	if (!(*stash))
// 		(*stash) = str_duplicate("");
// 	return (stash_data(fd, nbytes, buff, &(*stash)));
// }

// if (!(*stash))
// 	(*stash) = str_duplicate("");
// return (stash_data(fd, nbytes, buff, &(*stash)));

// nbytes = read(fd, buff, BUFFER_SIZE);
// stash = check_nbytes(fd, &nbytes, &buff, &stash);
// while (!find_new_line(buff))
// {
// 	buff[nbytes] = '\0';
// 	stash = join(stash, *buff);
// 	if (!stash)
// 	{
// 		free(buff);
// 		return (NULL);
// 	}
// 	nbytes = read(fd, *buff, BUFFER_SIZE);
// }

// static char	*stash_data(int fd, int *nbytes, char **buff, char **stash)
// {
// 	while (!find_new_line(*buff))
// 	{
// 		(*buff)[*nbytes] = '\0';
// 		*stash = join(*stash, *buff);
// 		if (!*stash)
// 		{
// 			free(*buff);
// 			return (NULL);
// 		}
// 		*nbytes = read(fd, *buff, BUFFER_SIZE);
// 	}
// 	// *stash = join(*stash, *buff); //duplicate
// 	free(*buff);
// 	return (*stash);
// }

// static char	*check_nbytes(int fd, int *nbytes, char **buff, char **stash)
// {
// 	if (*nbytes == 0)
// 	{
// 		free(*buff);
// 		return (*stash);
// 	}
// 	else if (*nbytes == -1)
// 	{
// 		free(*buff);
// 		free(*stash);
// 		*stash = NULL;
// 		return (NULL);
// 	}
// 	return (stash_data(fd, nbytes, &*buff, &*stash));
// }
//
//
/*
** FT_STRCHR => find_new_line
** Hint: use this approach:
**			line = str_duplicate(stash, (find_new_line(stash) - stash + 1));
**			leftovers = find_new_line(stash) + 1;
**			free(*stash);
**			stash = malloc(get_len(leftovers));
**			stash = leftovers;
**
** FT_STRDUP => str_duplicate
**
** FT_STRLEN => get_len
**
** FT_SUBSTR
**
** FT_STRJOIN => join
*/